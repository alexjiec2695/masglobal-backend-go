// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package di

import (
	"github.com/google/wire"
	"rest_app/app"
	"rest_app/app/config"
	app2 "rest_app/di/app"
	"rest_app/di/externalservice"
	"rest_app/di/repositories"
	server2 "rest_app/di/server"
	"rest_app/di/usecases"
	employee3 "rest_app/domain/usecase/employee"
	"rest_app/infrastructure/drivenadapters/externalservice/employee"
	employee2 "rest_app/infrastructure/drivenadapters/repositories/employee"
	"rest_app/infrastructure/entrypoints/rest/handlers"
	"rest_app/infrastructure/entrypoints/rest/routers"
	"rest_app/server"
)

// Injectors from wire.go:

// NewApplication wire's injector to create a new `app.Application`
func NewApplication(conf config.AppConfiguration) (*app.Application, error) {
	engine := server.NewServer()
	externalServiceImpl := employee.NewExternalServiceImpl()
	repository := employee2.NewEmployeeRepository(externalServiceImpl)
	getAllEmployeesUseCase := employee3.NewGetAllEmployeesUseCase(repository)
	getEmployeeByIdUseCase := employee3.NewGetEmployeeByIdUseCase(repository)
	employeeHandler := handlers.NewEmployeeHandler(getAllEmployeesUseCase, getEmployeeByIdUseCase)
	employeeRouter := routers.NewEmployeeRouter(employeeHandler)
	router := routers.NewRouter(engine, employeeRouter)
	application := &app.Application{
		Router: router,
		Config: conf,
	}
	return application, nil
}

// NewAppConfiguration wire's injector to create a new `config.AppConfiguration`
func NewAppConfiguration() config.AppConfiguration {
	appConfiguration := config.InitAppConfiguration()
	return appConfiguration
}

// wire.go:

var providerSet = wire.NewSet(app2.ProviderSet, server2.GinProviderSet, usecases.ProviderSet, repositories.ProviderSet, externalservice.ProviderSet)
